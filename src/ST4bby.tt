<#@ Include File="ST4bby.Config.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Data.Common" #>
<#@ Import Namespace="System.Data.SqlClient" #>
<#@ import Namespace="System.Diagnostics" #>
<#@ import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ import Namespace="System.Text" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ import Namespace="System.Xml" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ import Namespace="EnvDTE" #>
<#
    if( ConfigIsValid() )
    {
        var connectionString = GetConnectionString();

        var sqlGetTables = @"
SELECT t.object_id, t.name, s.name
FROM sys.tables t
JOIN sys.schemas s ON t.schema_id = s.schema_id";

        var sqlGetColumns = @"
SELECT c.name, c.is_identity, c.is_nullable, ty.name, c.max_length, ty.precision
FROM sys.tables t
JOIN sys.columns c ON t.object_id = c.object_id
JOIN sys.types ty ON c.user_type_id = ty.user_type_id
WHERE t.object_id = @TableId";

        using (var sqlConnection = new SqlConnection(connectionString))
        {
            var tables = new List<Table>();

            sqlConnection.Open();

            using (var sqlCommand = new SqlCommand(sqlGetTables, sqlConnection))
            using (var sqlDataReader = sqlCommand.ExecuteReader())
            {
                while (sqlDataReader.Read())
                {
                    tables.Add(new Table
                        {
                            TableId = (int)sqlDataReader.GetValue(0),
                            Name = (string)sqlDataReader.GetValue(1),
                            Schema = (string)sqlDataReader.GetValue(2),
                            // TODO: Where do we get this from?
                            IsSystemObject = false
                        });
                }

                sqlDataReader.Close();
            }

            foreach (var table in tables)
            {
                using (var sqlCommand = new SqlCommand(sqlGetColumns, sqlConnection))
                {
                    sqlCommand.Parameters.AddWithValue("@TableId", table.TableId);

                    using(var sqlDataReader = sqlCommand.ExecuteReader())
                    {
                        while (sqlDataReader.Read())
                        {
                            table.Columns.Add(new Column
                            {
                                Name = (string)sqlDataReader.GetValue(0),
                                IsIdentity = (bool)sqlDataReader.GetValue(1),
                                IsNullable = (bool)sqlDataReader.GetValue(2),
                                Type = (string)sqlDataReader.GetValue(3),
                                MaxLength = (Int16)sqlDataReader.GetValue(4),
                                Precision = (byte)sqlDataReader.GetValue(5)
                            });

                            if (IsClassOkToGenerate(table))
                            {
                                OutputClass(NameSpaceName, table);
                                var fileName = FileNameFormat.Replace("{table}", table.Name).Replace("{schema}", table.Schema).Replace("{database}", DatabaseName);
                                if (!fileName.EndsWith(".cs"))
                                    fileName += ".cs";

                                var path = SaveOutput(fileName);
                                // total hack but it adds the newly written file into the current visual studio instance
                                var project = GetCurrentProject();

                                project.ProjectItems.AddFromFile(path);
                            }
                        }
                    }
                }
            }
        }
    }
#>
<#+

    private readonly static Dictionary<string, string> TypeMappings = new Dictionary<string, string>
    {
        { "bit","bool" },
        { "uniqueidentifier","Guid" },
        { "datetime","DateTime" },
        { "datetime2","DateTime" },
        { "smalldatetime","DateTime" },
        { "int","int" },
        { "smallint","short" },
        { "bigint","long" },
        { "varchar","string" },
        { "nchar","char" },
        { "char","char" },
        { "nvarchar","string" },
        { "text","string" },
        { "decimal", "decimal" },
        { "money", "decimal" },
        { "float", "float" }
    };

    private readonly static Dictionary<string, string> IDataReaderTypeMappings = new Dictionary<string, string>
    {
        { "bit","GetBoolean" },
        { "uniqueidentifier","Guid" },
        { "datetime","GetDateTime" },
        { "datetime2","GetDateTime" },
        { "smalldatetime","GetDateTime" },
        { "int","GetInt32" },
        { "smallint","GetInt16" },
        { "bigint","GetInt64" },
        { "varchar","GetString" },
        { "nchar","GetString" },
        { "char","GetString" },
        { "nvarchar","GetString" },
        { "text","GetString" },
        { "decimal", "GetDecimal" },
        { "money", "GetDecimal" },
        { "float", "GetFloat" }
    };

    public EnvDTE.Project GetCurrentProject()
    {
        var serviceProvider             = (IServiceProvider)Host;
        var dte                         = (EnvDTE.DTE)serviceProvider.GetService( typeof( EnvDTE.DTE ) );
        var currentSlnProjects          = (Array)dte.ActiveSolutionProjects;

        return (EnvDTE.Project)currentSlnProjects.GetValue( 0 );
    }

    /// <summary> This method creates the signature for the class.
    /// E.g.: public partial class Customer()
    /// </summary>
    /// <param name="table"></param>
    /// <param name="usePartialClass"></param>
    /// <returns></returns>
    private static string CreateClassSignature( Table table, bool usePartialClass )
    {
        var ret = "public";

        if( usePartialClass )
        {
            ret += " partial";
        }

        ret += " class " + table.Name;

        if( false == string.IsNullOrWhiteSpace( ClassInheritFrom ) )
        {
            ret += " : " + ClassInheritFrom;
        }

        return ret;
    }

    /// <summary> This method creates the namespace signature.
    /// </summary>
    /// <param name="namespaceName"></param>
    /// <param name="table"></param>
    /// <param name="useSchemaForNamespace"></param>
    /// <returns></returns>
    private static string CreateNamespaceSignature( string namespaceName, Table table, bool useSchemaForNamespace )
    {
        string ret = string.Format( "namespace {0}", namespaceName );

        if( useSchemaForNamespace )
        {
            ret += "." + table.Schema;
        }

        return ret;
    }

    /// <summary> This method creates a parameter for a method from a column.
    /// E.g.: "int CustomerID" or "string Name".
    /// </summary>
    /// <param name="column"></param>
    /// <returns></returns>
    private static string CreateMethodParameter( Column column )
    {
        var isNullable       = column.IsNullable;
        var type             = TypeMappings.ContainsKey(column.Type) ? TypeMappings[column.Type] : "string";
        var typeFormat       = type != "string" && isNullable ? "Nullable<{0}>" : "{0}";

        return String.Format( "{0} {1}", String.Format( typeFormat,type ), column.Name );
    }

    /// <summary> This method creates a method signature.
    /// E.g.: "private void Set( CustomerID, Name )".
    /// </summary>
    /// <param name="scope">public, internal or private.  Should this be an enum?</param>
    /// <param name="isStatic"></param>
    /// <param name="returnType"></param>
    /// <param name="methodName"></param>
    /// <param name="columns"></param>
    /// <param name="includePrimaryKey">Whether the primary key should be included or not.
    /// New objects often can't have the PK set at the client, only in the database.</param>
    /// <returns></returns>
    private static string CreateMethodSignature( string scope, bool isStatic, string returnType, string methodName, List<Column> columns, bool includePrimaryKey = true, string additionalParameters = null )
    {
        // Create a list of the method's parameters.
        var paramList = new List<string>();

        if( columns != null )
        {
            foreach( var column in columns )
            {
                if( ! column.IsIdentity || includePrimaryKey )
                {
                    paramList.Add( CreateMethodParameter( column ) );
                }
            }
        }

        return string.Format(
            "{0}{1}{2}{3}({4}{5})",
            scope,
            isStatic ? " static" : null,
            false == string.IsNullOrWhiteSpace( returnType ) ? " " + returnType : null,
            " " + methodName,
            string.Join( ", ", paramList.ToArray() ),
            !string.IsNullOrWhiteSpace(additionalParameters) ? (paramList.Count > 0 ? ", " : null) + additionalParameters : null
            );
    }

    /// <summary> This method creates all parameters for a constructor.
    /// It is not necessarily only for constructor use.  A method like "Set( CustomerID, Name, ...)"
    /// could use it too.  Rename it when need arises.
    /// </summary>
    /// <param name="columns"></param>
    /// <param name="includePrimaryKey"></param>
    /// <returns></returns>
    private static string CreateNamedArgumentListForConstructor( List<Column> columns, bool includePrimaryKey = true )
    {
        var assignmentList = new List<string>();

        foreach( var column in columns )
        {
            if( ! column.IsIdentity || includePrimaryKey )
            {
                assignmentList.Add( column.Name + " = " + column.Name );
            }
        }

        return string.Join( "," + Environment.NewLine, assignmentList.ToArray() );
    }

    /// <summary> This method returns true if the table is among the ones that should generate code.
    /// Typically aren't system objects and explicitly excluded tables among those.
    /// </summary>
    /// <param name="table">The table in question.</param>
    /// <returns></returns>
    private bool IsClassOkToGenerate( Table table )
    {
        if( !string.IsNullOrWhiteSpace( ExcludeTablesRegex )
            && ( table.IsSystemObject || Regex.IsMatch( table.Name, ExcludeTablesRegex ) ) )
        {
            return false;
        }
        else if( !string.IsNullOrWhiteSpace( IncludeTablesRegex ) )
        {
            if( Regex.IsMatch( table.Name, IncludeTablesRegex ) )
            {
                return true;
            }
        }
        else
        {
            return true;
        }

        return false;
    }

    private string OutputProperty( Column column )
    {
        var isNullable       = column.IsNullable;
        var type             = TypeMappings.ContainsKey(column.Type) ? TypeMappings[column.Type] : "string";
        var typeFormat       = type != "string" && isNullable ? "Nullable<{0}>" : "{0}";

        var annotations      = GetAnnotations( column );

        return String.Format( "{0}public {1} {2} {{ get; set; }}", annotations, String.Format( typeFormat,type ), column.Name );
    }

    private string OutputIDataReaderMapping( Column column )
    {
        var isNullable       = column.IsNullable;
        var type             = IDataReaderTypeMappings.ContainsKey(column.Type) ? IDataReaderTypeMappings[column.Type] : "GetString";
        
        return String.Format("{0} = dataReader.{1}(dataReader.GetOrdinal(\"{0}\"));", column.Name, type);
    }

    string GetAnnotations( Column col )
    {
        var builder = new List<string>();
        var canHaveLength = new string[] { "nvarchar", "varchar", "char", "nchar" };

        if(col.IsIdentity)
            builder.Add("Key");

        if(!col.IsNullable)
            builder.Add("Required");

        var classDisplayName = col.Name;

        for (int i = 1; i < classDisplayName.Length - 1; i++)
        {
            if (classDisplayName[i].ToString() == char.ToUpper(classDisplayName[i]).ToString()
                && classDisplayName[i + 1].ToString() != char.ToUpper(classDisplayName[i + 1]).ToString())
            {
                classDisplayName = classDisplayName.Substring(0, i) + " " + classDisplayName.Substring(i, classDisplayName.Length - i);
                i++;
            }
            else if (classDisplayName[i].ToString() != " " && classDisplayName[i + 1].ToString() != " "
                && classDisplayName[i].ToString() != char.ToUpper(classDisplayName[i]).ToString()
                && classDisplayName[i + 1].ToString() == char.ToUpper(classDisplayName[i + 1]).ToString())
            {
                classDisplayName = classDisplayName.Substring(0, i + 1) + " " + classDisplayName.Substring(i + 1, classDisplayName.Length - i - 1);
                i += 2;
            }
        }

        builder.Add(String.Format(@"Display(Name=""{0}"")", classDisplayName));

        if( canHaveLength.Contains( col.Type ) && col.MaxLength > -1 )
            builder.Add( String.Format( "StringLength({0})", col.MaxLength ) );

        var notations = String.Join( ", ", builder );

        return builder.Count > 0 ? String.Format( "[{0}]{1}", notations, System.Environment.NewLine ) : String.Empty;
    }

    IEnumerable<string> GatherProperties( IEnumerable<Column> columns )
    {
        foreach ( Column col in columns )
            yield return OutputProperty( col );
    }

    IEnumerable<string> GatherIDataReaderMappings( IEnumerable<Column> columns )
    {
        foreach ( Column col in columns )
            yield return OutputIDataReaderMapping( col );
    }

    string GetSqlInsertColumnNames( IEnumerable<Column> columns )
    {
        var sets = new List<string>();

        foreach (var column in columns)
        {
            sets.Add(column.Name);
        }

        return string.Join(", ", sets);
    }

    string GetSqlInsertColumnValues( IEnumerable<Column> columns )
    {
        var sets = new List<string>();

        foreach (var column in columns)
        {
            sets.Add("@" + column.Name);
        }

        return string.Join(", ", sets);
    }

    string GetSqlUpdateStatement( IEnumerable<Column> columns )
    {
        var sets = new List<string>();

        foreach (var column in columns)
        {
            sets.Add(string.Format("{0} = @{0}", column.Name));
        }

        return string.Join(", ", sets);
    }
    
    string GetPrimaryKeyName(IEnumerable<Column> columns)
    {
        foreach (Column column in columns)
            if (column.IsIdentity)
                return column.Name;

        return null;
    }

    void Out( string stuff )
    {
#><#= stuff + System.Environment.NewLine #><#+
    }

    void Out( string stuff, params object[] args )
    {
#><#= String.Format( stuff, args ) + System.Environment.NewLine #><#+
    }

    string SaveOutput( string outputFileName )
    {
        var content = this.GenerationEnvironment.ToString();
        string templateDirectory = Path.GetDirectoryName( Host.TemplateFile );
        string outputFilePath = Path.Combine( templateDirectory, TargetPath, outputFileName );

        File.WriteAllText( outputFilePath, content );

        this.GenerationEnvironment.Remove( 0, this.GenerationEnvironment.Length );

        return outputFilePath;
    }

    void OutputClass( string namespaceName, Table table )
    {
        Out( "// This class was automatically generated with love by ST4bby {0}.", System.DateTime.Now.ToString() );
        Out( "// Read more at http://jbubriski.github.com/ST4bby/" );
        Out( "" );
        Out( CreateNamespaceSignature( namespaceName, table, UseSchemaForNamespace ) );
        Out( "{" );
        PushIndent( "\t" );
            Out( "using System;" );
            Out( "using System.ComponentModel.DataAnnotations;" );

            if (GenerateIDataReaderConstructor)
                Out("using System.Data;");

            if (GenerateSqlCrudMethods)
            {
                Out("using System.Collections.Generic;");
                Out("using System.Data.SqlClient;");
            }

            if (!string.IsNullOrWhiteSpace(AdditionalUsings))
                Out(AdditionalUsings);

            Out( "" );
            Out( CreateClassSignature( table, UsePartialClass ) );
            Out( "{" );
            PushIndent( "\t" );
                // Properties.
                var properties = GatherProperties(table.Columns);
                Out(String.Join(System.Environment.NewLine + System.Environment.NewLine, properties));
                
                // IDataReader Constructor
                if (GenerateIDataReaderConstructor)
                {
                    Out("");
                    Out("/// <summary>");
                    Out("/// This constructor takes and IDataReader with all of the columns and maps them to the object");
                    Out("/// </summary>");
                    Out(CreateMethodSignature("public", false, null, table.Name, null) + " { }");

                    Out("");
                    Out("/// <summary>");
                    Out("/// This constructor takes and IDataReader with all of the columns and maps them to the object");
                    Out("/// </summary>");
                    Out(CreateMethodSignature("public", false, null, table.Name, null, false, "IDataReader dataReader"));
                    Out("{");
                    PushIndent( "\t" );
                        // Mappings
                        var iDataReaderMappings = GatherIDataReaderMappings(table.Columns);
                        Out(String.Join(System.Environment.NewLine, iDataReaderMappings));
                    PopIndent();
                    Out("}");
                }

                // Static constructors.
                if( !string.IsNullOrWhiteSpace( NameOfStaticConstructor ) )
                {
                    Out( "" );
                    Out( "/// <summary>" );
                    Out( "/// This static constructor takes all fields but the primary key." );
                    Out( "/// </summary>" );
                    Out( "/// <returns></returns>" );
                    Out( CreateMethodSignature( "public", true, table.Name, NameOfStaticConstructor, table.Columns, includePrimaryKey : false ) );
                    Out( "{" );
                    PushIndent("\t" );
                        Out( "return new " + table.Name + "()" );
                        Out( "{" );
                        PushIndent( "\t" );
                            Out( CreateNamedArgumentListForConstructor( table.Columns, includePrimaryKey : false ) );
                        PopIndent();
                        Out( "};" );
                    PopIndent();
                    Out( "}" );
                    Out( "" );
                    Out( "/// <summary> This static constructor takes all fields including the primary key." );
                    Out( "/// </summary>" );
                    Out( "/// <returns></returns>" );
                    Out( CreateMethodSignature( "public", true, table.Name, NameOfStaticConstructor, table.Columns ) );
                    Out( "{" );
                    PushIndent( "\t" );
                        Out( "return new " + table.Name + "()" );
                        Out( "{" );
                        PushIndent( "\t" );
                            Out( CreateNamedArgumentListForConstructor( table.Columns, includePrimaryKey : true ) );
                        PopIndent();
                        Out( "};" );
                    PopIndent();
                    Out( "}" );
                }

                
                // IDataReader Constructor
                if (GenerateSqlCrudMethods)
                {
                    var primaryKeyName = GetPrimaryKeyName(table.Columns);
                    var camelTableName = Camel(table.Name);
                    
                    Out("");
                    Out(CreateMethodSignature( "public", true, table.Name, "Get", null, false, "int id"));
                    Out("{");
                    PushIndent( "\t" );
                        Out("var sqlCommandText = @\"");
                        Out("SELECT *");
                        Out("FROM " + table.Name);
                        Out("WHERE " + primaryKeyName + " = @" + primaryKeyName + "\";");
                        Out("");
                        Out("using (var sqlConnection = " + ConnectionGetCode + ")");
                        Out("using (var sqlCommand = new SqlCommand(sqlCommandText, sqlConnection))");
                        Out("{");
                        PushIndent( "\t" );
                            Out("sqlCommand.Parameters.AddWithValue(\"" + primaryKeyName + "\", id);");
                            Out("");
                            Out("sqlCommand.Connection.Open();");
                            Out("");
                            Out("var sqlReader = sqlCommand.ExecuteReader();");
                            Out("");
                            Out("if (sqlReader.Read())");
                            Out("{");
                            PushIndent( "\t" );
                                Out("return new " + table.Name + "(sqlReader);");
                            PopIndent();
                            Out("}");
                        PopIndent();
                        Out("}");
                        Out("");
                        Out("return null;");
                    PopIndent();
                    Out("}");
                    
                    
                    Out("");
                    Out(CreateMethodSignature( "public", true, "IEnumerable<" + table.Name + ">", "Get", null));
                    Out("{");
                    PushIndent( "\t" );
                        Out("var sqlCommandText = @\"");
                        Out("SELECT *");
                        Out("FROM " + table.Name + "\";");
                        Out("");
                        Out("var items = new List<" + table.Name + ">();");
                        Out("");
                        Out("using (var sqlConnection = " + ConnectionGetCode + ")");
                        Out("using (var sqlCommand = new SqlCommand(sqlCommandText, sqlConnection))");
                        Out("{");
                        PushIndent( "\t" );
                            Out("sqlCommand.Connection.Open();");
                            Out("");
                            Out("var sqlReader = sqlCommand.ExecuteReader();");
                            Out("");
                            Out("while (sqlReader.Read())");
                            Out("{");
                            PushIndent( "\t" );
                                Out("items.Add(new " + table.Name + "(sqlReader));");
                            PopIndent();
                            Out("}");
                        PopIndent();
                        Out("}");
                        Out("");
                        Out("return items;");
                    PopIndent();
                    Out("}");
                    
                    
                    Out("");
                    Out(CreateMethodSignature( "public", true, "void", "Insert", null, false, table.Name + " " + camelTableName));
                    Out("{");
                    PushIndent( "\t" );
                        Out("var sqlCommandText = @\"");
                        Out("INSERT");
                        Out("INTO " + table.Name);
                        Out(GetSqlInsertColumnNames(table.Columns));
                        Out("VALUES");
                        Out(GetSqlInsertColumnValues(table.Columns) + "\";");
                        Out("");
                        Out("using (var sqlConnection = " + ConnectionGetCode + ")");
                        Out("using (var sqlCommand = new SqlCommand(sqlCommandText, sqlConnection))");
                        Out("{");
                        PushIndent( "\t" );
                            // TODO: Parameters
                            Out("sqlCommand.Connection.Open();");
                            Out("");
                            Out("sqlCommand.ExecuteNonQuery();");
                            Out("");
                            Out("sqlCommand.Connection.Close();");
                        PopIndent();
                        Out("}");
                    PopIndent();
                    Out("}");

                    
                    Out("");
                    Out(CreateMethodSignature( "public", true, "void", "Update", null, false, table.Name + " " + camelTableName));
                    Out("{");
                    PushIndent( "\t" );
                        Out("var sqlCommandText = @\"");
                        Out("UPDATE " + table.Name);
                        Out("SET " + GetSqlUpdateStatement(table.Columns));
                        Out("WHERE " + primaryKeyName + " = @" + primaryKeyName + "\";");
                        Out("");
                        Out("using (var sqlConnection = " + ConnectionGetCode + ")");
                        Out("using (var sqlCommand = new SqlCommand(sqlCommandText, sqlConnection))");
                        Out("{");
                        PushIndent( "\t" );
                            Out("sqlCommand.Parameters.AddWithValue(\"" + primaryKeyName + "\", " + camelTableName + "." + primaryKeyName + ");");
                            // TODO: Parameters
                            Out("");
                            Out("sqlCommand.Connection.Open();");
                            Out("");
                            Out("sqlCommand.ExecuteNonQuery();");
                            Out("");
                            Out("sqlCommand.Connection.Close();");
                        PopIndent();
                        Out("}");
                    PopIndent();
                    Out("}");
                    
                    
                    Out("");
                    Out(CreateMethodSignature( "public", true, "void", "Delete", null, false, "int id"));
                    Out("{");
                    PushIndent( "\t" );
                        Out("var sqlCommandText = @\"");
                        Out("DELETE");
                        Out("FROM " + table.Name);
                        Out("WHERE " + primaryKeyName + " = @" + primaryKeyName + "\";");
                        Out("");
                        Out("using (var sqlConnection = " + ConnectionGetCode + ")");
                        Out("using (var sqlCommand = new SqlCommand(sqlCommandText, sqlConnection))");
                        Out("{");
                        PushIndent( "\t" );
                            Out("sqlCommand.Parameters.AddWithValue(\"" + primaryKeyName + "\", id);");
                            Out("");
                            Out("sqlCommand.Connection.Open();");
                            Out("");
                            Out("sqlCommand.ExecuteNonQuery();");
                            Out("");
                            Out("sqlCommand.Connection.Close();");
                        PopIndent();
                        Out("}");
                    PopIndent();
                    Out("}");
                }
            PopIndent();
            Out( "}" );
        PopIndent();
        Out( "}" );
    }

    private string Camel(string name)
    {
        return Char.ToLowerInvariant(name[0]) + name.Substring(1);
    }

    public class Table
    {
        public int TableId { get; set; }
        public string Name { get; set; }
        public string Schema { get; set; }
        public bool IsSystemObject { get; set; }

        public List<Column> Columns { get; set; }

        public Table()
        {
            Columns = new List<Column>();
        }
    }

    public class Column
    {
        public string Name { get; set; }
        public bool IsIdentity { get; set; }
        public bool IsNullable { get; set; }
        public string Type { get; set; }
        public int MaxLength { get; set; }
        public int Precision { get; set; }
    }
#>
